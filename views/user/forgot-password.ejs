<%- include('../layout/user_header.ejs') %>

<!-- Forgot Password -->
<div class="container d-flex justify-content-center align-items-center min-vh-100">
    <div class="login-box p-4 rounded shadow-sm bg-light">
        <h1 class="text-center mb-4">Forgot Password</h1>
        <form id="forgot-password-form" novalidate onsubmit="forgotpass(event)" >
            <div class="form-group mb-3">
                <label for="email" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" placeholder="Enter your email" required>
                <div class="invalid-feedback">Please enter a valid email address without spaces.</div>
            </div>
            <div class="form-group mb-3">
                <label for="current-password" class="form-label">Current Password</label>
                <div class="input-group">
                    <input type="password" class="form-control" id="current-password" placeholder="Enter your current password" required>
                    <span class="input-group-text" onclick="togglePasswordVisibility('current-password')">
                        <i class="bi bi-eye" id="toggle-icon-current-password"></i>
                    </span>
                </div>
                <div class="invalid-feedback">Current password is required and cannot contain spaces.</div>
            </div>            
            <div class="form-group mb-3">
                <label for="new-password" class="form-label">New Password</label>
                <div class="input-group">
                    <input type="password" class="form-control" id="new-password" placeholder="Enter new password" required>
                    <span class="input-group-text" onclick="togglePasswordVisibility('new-password')">
                        <i class="bi bi-eye" id="toggle-icon-new-password"></i>
                    </span>
                </div>
                <div class="invalid-feedback">New password is required and cannot contain spaces.</div>
            </div>
            <div class="form-group mb-4">
                <label for="confirm-password" class="form-label">Confirm New Password</label>
                <input type="password" class="form-control" id="confirm-password" placeholder="Confirm new password" required>
                <div class="invalid-feedback">Passwords must match and cannot contain spaces.</div>
            </div>
            <div class="text-center">
                <button type="submit" class="btn btn-dark btn-login rounded-pill" id="submit-btn-forgot">Reset Password</button>
            </div>

        </form>
           
        <div class="text-center mt-3">
                <a href="/login" class="text-dark">Back to Login</a>
            </div>
        
    </div>
</div>

<script>
    async function forgotpass(event) {
    event.preventDefault();

    // Get form elements
    const email = document.getElementById('email');
    const currentPassword = document.getElementById('current-password');
    const newPassword = document.getElementById('new-password');
    const confirmPassword = document.getElementById('confirm-password');

    // Reset validation states
    const form = document.getElementById('forgot-password-form');
    form.classList.remove('was-validated');
    resetValidationState([email, currentPassword, newPassword, confirmPassword]);

    let isValid = true;

    // Validate fields
    if (!validateEmail(email.value)) {
        showInvalid(email, 'Please enter a valid email address.');
        isValid = false;
    } else {
        showValid(email);
    }

    if (!validatePassword(currentPassword.value)) {
        showInvalid(currentPassword, 'Current password is required and cannot contain spaces.');
        isValid = false;
    } else {
        showValid(currentPassword);
    }

    if (!validatePassword(newPassword.value)) {
        showInvalid(newPassword, 'New password is required and cannot contain spaces.');
        isValid = false;
    } else {
        showValid(newPassword);
    }

    if (newPassword.value !== confirmPassword.value) {
        showInvalid(confirmPassword, 'Passwords must match.');
        isValid = false;
    } else if (!validatePassword(confirmPassword.value)) {
        showInvalid(confirmPassword, 'Confirm password cannot contain spaces.');
        isValid = false;
    } else {
        showValid(confirmPassword);
    }

    if (isValid) {
        try {
            Swal.showLoading();
            const response = await fetch('/forgot/send-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email: email.value, newpass: newPassword.value, currentpass: currentPassword.value, confirmPass: confirmPassword.value })
            });

            if (!response.ok) {
                throw new Error('Server responded with error. Please try again later.');
            }

            const data = await response.json();
            
            if (data.success) {
                Swal.close();
                const newpass = data.hashpass;
                const { value: otp } = await Swal.fire({
                    title: 'Enter OTP',
                    html: `
                        <input id="otp-input" class="swal2-input" placeholder="Enter OTP" />
                        <div id="resend-container" class="mt-3" style="display:none;">
                            <button id="resend-otp" class="btn btn-secondary">Resend OTP</button>
                        </div>
                        <div id="timer" class="mt-3"></div>
                    `,
                    confirmButtonText: 'Verify OTP',
                    cancelButtonText: 'Cancel',
                    showCancelButton: true,
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        const otp = document.getElementById('otp-input').value;
                        if (!otp) {
                            Swal.showValidationMessage('Please enter the OTP');
                            return false;
                        }
                        // Verify OTP
                        const otpResponse = await fetch('/forgot/verifyOtpAndChangePassword', {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ email: email.value, otp, newpass })
                        });

                        if (otpResponse.ok) {
                            const otpData = await otpResponse.json();
                            if (otpData.success) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'OTP Verified',
                                    text: 'You can now reset your password.',
                                }).then(() => {
                                    window.location.href = '/forgot';
                                });
                            } else {
                                Swal.showValidationMessage(otpData.message || 'The OTP you entered is incorrect.');
                                return false;
                            }
                        } else {
                            const otpErrorData = await otpResponse.json();
                            Swal.showValidationMessage(otpErrorData.message || 'There was an error verifying the OTP. Please try again.');
                            return false;
                        }
                    },
                    onOpen: () => {
                        // Timer for showing the resend button
                        let timeLeft = 30; // seconds
                        const timerElement = document.getElementById('timer');
                        const resendContainer = document.getElementById('resend-container');

                        const timerInterval = setInterval(() => {
                            if (timeLeft <= 0) {
                                clearInterval(timerInterval);
                                resendContainer.style.display = 'block';
                                timerElement.textContent = 'You can now resend the OTP.';
                            } else {
                                timerElement.textContent = `Resend OTP available in ${timeLeft} seconds`;
                                timeLeft -= 1;
                            }
                        }, 1000);

                        // Add event listener for the resend button
                        document.getElementById('resend-otp').addEventListener('click', async () => {
                            Swal.showLoading();
                            const resendResponse = await fetch('/forgot/send-otp', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ email: email.value, newpass: newPassword.value })
                            });

                            Swal.close();
                            if (resendResponse.ok) {
                                Swal.fire('OTP Resent', 'A new OTP has been sent to your email.', 'success');
                            } else {
                                const resendErrorData = await resendResponse.json();
                                Swal.fire('Error', resendErrorData.message || 'There was an error sending the OTP. Please try again.', 'error');
                            }
                        });
                    }
                });
            } else {
                Swal.close();
                Swal.fire({
                    icon: 'error',
                    title: 'Email Error',
                    text: 'There was an error sending the OTP. Please try again.',
                });
            }
        } catch (error) {
            Swal.close();
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'There was an issue with the network. Please try again later.',
            });
        }
    } else {
        form.classList.add('was-validated');
    }
}

function validatePassword(password) {
    return password && !/\s/.test(password);
}

function validateEmail(email) {
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailPattern.test(email);
}

function resetValidationState(fields) {
    fields.forEach(field => {
        field.classList.remove('is-invalid', 'is-valid');
    });
}

function showInvalid(field, message) {
    field.classList.remove('is-valid');
    field.classList.add('is-invalid');
    field.nextElementSibling.textContent = message;
}

function showValid(field) {
    field.classList.remove('is-invalid');
    field.classList.add('is-valid');
}

function togglePasswordVisibility(inputId) {
    const input = document.getElementById(inputId);
    const icon = document.getElementById('toggle-icon-' + inputId);
    if (input.type === 'password') {
        input.type = 'text';
        icon.classList.replace('bi-eye', 'bi-eye-slash');
    } else {
        input.type = 'password';
        icon.classList.replace('bi-eye-slash', 'bi-eye');
    }
}

    
</script>

<%- include('../layout/user_footer.ejs') %>
